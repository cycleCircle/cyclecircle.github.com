<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xiaobin]]></title>
  <link href="http://cyclecircle.github.io/atom.xml" rel="self"/>
  <link href="http://cyclecircle.github.io/"/>
  <updated>2015-10-16T17:02:46+08:00</updated>
  <id>http://cyclecircle.github.io/</id>
  <author>
    <name><![CDATA[xiaobin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android M 新特性]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/10/16/android-m-new-features/"/>
    <updated>2015-10-16T14:52:54+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/10/16/android-m-new-features</id>
    <content type="html"><![CDATA[<h3>指纹识别API</h3>

<p>调用FingerprintManager里面的authenticate()方法就可以很轻松的进行指纹识别，当然，我们的app需要
实现一个UI来提醒用户进行指纹识别，</p>

<p>使用指纹识别还需要加入权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.USE_FINGERPRINT&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用模拟器来进行测试的话，可以通过adb发送一个指纹来完成测试的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="o">-</span><span class="n">e</span> <span class="n">emu</span> <span class="n">finger</span> <span class="n">touch</span> <span class="o">&lt;</span><span class="n">finger_id</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除了Apache HTTP Client</h3>

<h3>用BoringSSL代替OpenSSL</h3>

<p>在使用NDK的时候，不能再像以前一样使用libcrypto.so或libssl.so这些库了</p>

<h3>硬件标识</h3>

<p>WifiInfo.getMacAddress() 和 BluetoothAdapter.getAddress()已经不能再用了，Android M 对这两个方法
的返回只会是一个固定的值 02:00:00:00:00:00</p>

<p>而且，如果我们想获取附近的WiFi列表或蓝牙列表，Android M 之后就要加上权限了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ACCESS_FINE_LOCATION</span>
</span><span class='line'><span class="n">ACCESS_COARSE_LOCATION</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们不能再像以前一样随意的删除或修改WifiConfiguration了，现在只能够删除或修改自己创建的WifiConfiguration</p>

<h3>Doze和App Standby</h3>

<p>Doze：不充电，屏幕关闭，静止不动一段时间后，就会进入这个模式，它会让系统处于睡眠的状态，但是它
还是会周期性的唤醒一小段时间，这样子，APP就可以进行一些同步操作以及系统就会处理一些延迟的操作</p>

<p>App Standby：进入这个模式后，系统就会把长时间不使用的APP判断为暂停使用的了，如果没有
进行充电的话，那么系统就会把这些APP的网络关闭，一些同步的操作都会暂停</p>

<p>只要系统是Android M 以上的，这两种模式就会生效，无论你APP的target API指定的是几</p>

<p>进行Doze之后，APP将无法进行网络访问，无法wake locks,AlarmManager (setExact(), setWindow())这些都
会等待到周期性唤醒的那一小段时间来处理，如果需要alarm起作用，那么就需要使用setAndAllowWhileIdle()
或setExactAndAllowWhileIdle() （这两个方法只能唤醒15分钟），需要注意的是，setAlarmClock()是照常起作用的，系统会提前一点时间
退出Doze模式来让它起作用
在这个模式下，无法搜索wifi，无法sync adapter, 无法调度JobScheduler</p>

<p>对于推送类的应用，Google推荐用GCM（Google Cloud Message)</p>

<p>对于App Standby：下面的三种情况是不会进入这个模式的</p>

<ul>
<li><p>当用户显式得运行了APP</p></li>
<li><p>APP有一个foreground的进程（包括一个activity或者一个foreground service 或者被另外的一个activity
或foreground service使用</p></li>
<li><p>APP发送一个Notification，被用户在锁屏界面看到了或通知栏看到了</p></li>
</ul>


<p>要注意的是，如果设备长时间处于闲置状态，那么系统就会允许这些APP访问网络1次每天</p>

<h2>白名单</h2>

<p>Android对于上面那两种模式设置了一个白名单，白名单里面的APP可以进行网络访问和partial wake locks
但其他限制依然起作用</p>

<p>isIgnoringBatteryOptimizations()可以判断出自己是不是在白名单里面</p>

<p>添加白名单：Settings > Battery > Battery Optimization</p>

<p>REQUEST_IGNORE_BATTERY_OPTIMIZATIONS  权限申请</p>

<p>ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS  跳转到settings</p>

<p>ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS 弹框申请</p>

<h2>adb测试</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">dumpsys</span> <span class="n">battery</span> <span class="n">unplug</span>
</span><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">dumpsys</span> <span class="n">deviceidle</span> <span class="n">step</span>
</span><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">dumpsys</span> <span class="n">deviceidle</span> <span class="o">-</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">dumpsys</span> <span class="n">battery</span> <span class="n">unplug</span>
</span><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">inactive</span> <span class="o">&lt;</span><span class="n">packageName</span><span class="o">&gt;</span> <span class="kc">true</span><span class="o">&lt;/</span><span class="n">packageName</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">inactive</span> <span class="o">&lt;</span><span class="n">packageName</span><span class="o">&gt;</span> <span class="kc">false</span>
</span><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">get</span><span class="o">-</span><span class="n">inactive</span> <span class="o">&lt;</span><span class="n">packageName</span><span class="o">&gt;&lt;/</span><span class="n">packageName</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Screen Lock]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/29/android-screen-lock/"/>
    <updated>2015-07-29T10:20:12+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/29/android-screen-lock</id>
    <content type="html"><![CDATA[<p>在Android上面做锁屏是一件挺麻烦的事情，要解决的事情还是比较多的</p>

<h3>重启</h3>

<p>首先就是要重启后能够自动启动，这个还是比较容易的，只要设置一个开机启动就好了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">receiver</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;.BootReceiver&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span> <span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">action</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span>
</span><span class='line'>             <span class="s">&quot;android.intent.action.BOOT_COMPLETED&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">receiver</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span>
</span><span class='line'> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在收到广播就启动自己</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BootReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">myIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">MainActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">myIntent</span><span class="o">.</span><span class="na">addFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NEW_TASK</span><span class="o">);</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">myIntent</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>返回键和HOME键</h3>

<p>处理返回键和HOME键，这个也是比较简单的，重写一下onKeyDown方法就好了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_BACK</span> <span class="o">&amp;&amp;</span> <span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_HOME</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Home键的处理，也可以通过声明AndroidManifest文件来进行处理，但这个有一个问题，就是要选择我们的应用
才行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">action</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">category</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.category.HOME&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">category</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">category</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>电源键</h3>

<p>处理电源键是很麻烦的一件事，在4.0以下的版本里面有一个非常简单的解决方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAttachedToWindow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getWindow</span><span class="o">().</span><span class="na">addFlags</span><span class="o">(</span>
</span><span class='line'>        <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_DISMISS_KEYGUARD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">getWindow</span><span class="o">().</span><span class="na">addFlags</span><span class="o">(</span>
</span><span class='line'>        <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_SHOW_WHEN_LOCKED</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>系统对话框</h3>

<p>有些时候，系统可能会弹出一些系统对话框来，比如升级，或低电量这些，这些有可能会把锁屏给绕过，进入
系统，</p>

<p>所以为了摆脱这些系统弹框的困扰，可用的解决方法为：当Activity失去焦点时，发送一个关闭所有系统
对话框的广播</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onWindowFocusChanged</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">hasFocus</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onWindowFocusChanged</span><span class="o">(</span><span class="n">hasFocus</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">hasFocus</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">closeDialog</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_CLOSE_SYSTEM_DIALOGS</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sendBroadcast</span><span class="o">(</span><span class="n">closeDialog</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>虚拟键盘</h3>

<p>如果键盘是需要的，那就最好用自己的实现</p>

<h3>状态栏</h3>

<p>这个也是一个比较难处理的</p>

<p>在Android4.0以下的系统，可以指定窗口的类型为<code>TYPE_SYSTEM_ALERT</code>，这样的窗口一般会显示在最上面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">final</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span>
</span><span class='line'>          <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span>
</span><span class='line'>          <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span>
</span><span class='line'>          <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">TYPE_SYSTEM_ALERT</span><span class="o">,</span>
</span><span class='line'>          <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_LAYOUT_IN_SCREEN</span><span class="o">,</span>
</span><span class='line'>          <span class="n">PixelFormat</span><span class="o">.</span><span class="na">TRANSLUCENT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">wm</span> <span class="o">=</span> <span class="o">(</span><span class="n">WindowManager</span><span class="o">)</span> <span class="n">getApplicationContext</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">WINDOW_SERVICE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mTopView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">View</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">getWindow</span><span class="o">().</span><span class="na">setAttributes</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span><span class='line'>  <span class="n">wm</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">mTopView</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以当状态栏一出现，就把它给隐藏掉，但这个需要权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.EXPAND_STATUS_BAR&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onWindowFocusChanged</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">hasFocus</span><span class="o">)&lt;</span><span class="n">br</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="k">if</span><span class="o">(!</span><span class="n">hasFocus</span><span class="o">)</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>           <span class="n">Object</span> <span class="n">service</span>  <span class="o">=</span> <span class="n">getSystemService</span><span class="o">(</span><span class="s">&quot;statusbar&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">statusbarManager</span> <span class="o">=</span>
</span><span class='line'>              <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;android.app.StatusBarManager&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="n">Method</span> <span class="n">collapse</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="n">statusbarManager</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;collapse&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="n">collapse</span> <span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>           <span class="n">collapse</span> <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而且在Android4.1后，还可以使用SDK来隐藏状态栏（这个可能会有问题，慎用）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">View</span> <span class="n">decorView</span> <span class="o">=</span> <span class="n">getWindow</span><span class="o">().</span><span class="na">getDecorView</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">uiOptions</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_FULLSCREEN</span><span class="o">;</span>
</span><span class='line'><span class="n">decorView</span><span class="o">.</span><span class="na">setSystemUiVisibility</span><span class="o">(</span><span class="n">uiOptions</span><span class="o">);</span>
</span><span class='line'><span class="n">ActionBar</span> <span class="n">actionBar</span> <span class="o">=</span> <span class="n">getActionBar</span><span class="o">();</span>
</span><span class='line'><span class="n">actionBar</span><span class="o">.</span><span class="na">hide</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还有一个方法就是，创建一个透明的视图对象，拦截掉状态栏上的点击事件，这个视图要求需要
<code>SYSTEM_ALERT_WINDOW</code>标识</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程08-Exchanger]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/24/multi-thread-08-exchanger/"/>
    <updated>2015-07-24T15:33:12+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/24/multi-thread-08-exchanger</id>
    <content type="html"><![CDATA[<p>Exchanger用来实现两个线程之间的数据交换，如果一个线程先到，那就会等待与它交换数据的线程也到达，
才能交换，交换完成后才能继续做后面的事情</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExchangerDemo</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Exchanger</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">exchanger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Exchanger</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;aaa&quot;</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; ready to change the data &quot;</span> <span class="o">+</span> <span class="n">str</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="n">exchanger</span><span class="o">.</span><span class="na">exchange</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; get data &quot;</span> <span class="o">+</span> <span class="n">str1</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;bbb&quot;</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; ready to change the data &quot;</span> <span class="o">+</span> <span class="n">str</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="n">exchanger</span><span class="o">.</span><span class="na">exchange</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; get data &quot;</span> <span class="o">+</span> <span class="n">str1</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">change</span> <span class="n">the</span> <span class="n">data</span> <span class="n">aaa</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">change</span> <span class="n">the</span> <span class="n">data</span> <span class="n">bbb</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span> <span class="n">get</span> <span class="n">data</span> <span class="n">aaa</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span> <span class="n">get</span> <span class="n">data</span> <span class="n">bbb</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程07-CountDownLatch]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/24/multi-thread-07-countdownlatch/"/>
    <updated>2015-07-24T15:17:56+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/24/multi-thread-07-countdownlatch</id>
    <content type="html"><![CDATA[<p>CountDownLatch计数器，可以很容易的实现类似裁判与运动员，一份文件等待多个批复等问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountDownLatchDemo</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">cdOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">cdAnswer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CountDownLatch</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; ready to go&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">cdOrder</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; running&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; return the result&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">cdAnswer</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; ready to send order&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">cdOrder</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; sent order&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">cdAnswer</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; get all results&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">3</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">go</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">go</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">go</span>
</span><span class='line'><span class="n">main</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">send</span> <span class="n">order</span>
</span><span class='line'><span class="n">main</span> <span class="n">sent</span> <span class="n">order</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">3</span> <span class="n">running</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span> <span class="n">running</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span> <span class="n">running</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">3</span> <span class="k">return</span> <span class="n">the</span> <span class="n">result</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span> <span class="k">return</span> <span class="n">the</span> <span class="n">result</span>
</span><span class='line'><span class="n">pool</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span> <span class="k">return</span> <span class="n">the</span> <span class="n">result</span>
</span><span class='line'><span class="n">main</span> <span class="n">get</span> <span class="n">all</span> <span class="n">results</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程06-CyclicBarrier]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/24/multi-thread-06-cyclicbarrier/"/>
    <updated>2015-07-24T14:55:29+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/24/multi-thread-06-cyclicbarrier</id>
    <content type="html"><![CDATA[<p>CyclicBarrier可以实现的功能是：多个线程一起工作，要同时达到某种效果后才能做下一件事，就好像
一群人出去玩，每个人是一个线程，约定在一个地方集合，只有当全部人到达那个地方再能前往目的地。
CyclicBarrier就可以解决这样的问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CyclicBarrierDemo</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">CyclicBarrier</span> <span class="n">cyclicBarrier</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CyclicBarrier</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; arrived 1 &quot;</span> <span class="o">+</span>
</span><span class='line'>                                  <span class="o">(</span><span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">getNumberWaiting</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">?</span> <span class="s">&quot;all number arrived, keep going&quot;</span> <span class="o">:</span> <span class="s">&quot;waiting&quot;</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                      
</span><span class='line'>                      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; arrived 2 &quot;</span> <span class="o">+</span>
</span><span class='line'>                                  <span class="o">(</span><span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">getNumberWaiting</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">?</span> <span class="s">&quot;all number arrived, keep going&quot;</span> <span class="o">:</span> <span class="s">&quot;waiting&quot;</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                      
</span><span class='line'>                      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; arrived 3 &quot;</span> <span class="o">+</span>
</span><span class='line'>                                  <span class="o">(</span><span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">getNumberWaiting</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">?</span> <span class="s">&quot;all number arrived, keep going&quot;</span> <span class="o">:</span> <span class="s">&quot;waiting&quot;</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">cyclicBarrier</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                      
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android安全浅析]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/23/android-security/"/>
    <updated>2015-07-23T14:36:25+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/23/android-security</id>
    <content type="html"><![CDATA[<p>killBackgroundProcesses引起的事件</p>

<p>前一段时间，知乎上有一个非常热门的话题，就是“美团通过killBackgroundProcesses来杀死竞争对手APP”，
但是这个话题感觉炒作的成份更多点，或被一些有心人放大了来说，只有一定经验的Android开发，都知道
killBackgrooundProcesses这个方法并没有想像的那么强大，很多时候，并没有得到想要的效果，而且现在
的Android都会重新启动那些意外死亡的进程的，所以感觉这事情是被人放大了来炒作了。</p>

<p>如果真要通过杀死竞争对手的APP这种方式来竞争，根本不会用这样的方法了。有一些方法可以让一些APP根本
无法工作。</p>

<h3>由于自身漏洞引发的无法工作漏洞</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">getAction</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;TestForNullPointerException&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;TAG&quot;</span><span class="o">,</span> <span class="s">&quot;Test for Android Refuse Service Bug&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，应试很多人都会这样写，而且也写了不少，看起来没什么问题，但是这个却会引起一个攻击漏洞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">start</span> <span class="o">-</span><span class="n">n</span> <span class="n">xxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">/.</span><span class="na">MainActivity</span>
</span></code></pre></td></tr></table></div></figure>


<p>遇到这样的攻击代码，可能就会导致APP崩溃，</p>

<p>而且当攻击者通过APP不停的进行攻击时，就会不停的提示崩溃，用户就极有可能会把那相APP卸载
这样就很可能达到“消灭对手”的目的</p>

<p>再例如下面的代码，就会被人利用来进行攻击</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">i</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">test</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">i</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="s">&quot;serializable_key&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>攻击代码（根据对应APP的Intent传递数据缺少校验来进行修改）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">i</span><span class="o">.</span><span class="na">setClassName</span><span class="o">(</span><span class="s">&quot;xxx.xxxx.xxxxx&quot;</span><span class="o">,</span> <span class="s">&quot;xxx.xxxx.xxxxx.MainActivity&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">i</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;serializable_key&quot;</span><span class="o">,</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个漏洞的情况非常常见，而且可利用的情况非常的多。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class='line'><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intArray</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntegerArrayListExtra</span><span class="o">(</span><span class="s">&quot;user_id&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">intArray</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">USER_NUM</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">intArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的代码也是很容易就被利用到的</p>

<p>攻击代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setClassName</span><span class="o">(</span><span class="s">&quot;xxx.xxxx.xxxxx&quot;</span><span class="o">,</span> <span class="s">&quot;xxx.xxxx.xxxxx.MainActivity&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">user_id</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;user_id&quot;</span><span class="o">,</span> <span class="n">user_id</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>会有这个漏洞还是因为校验数据合法性的问题，所以在使用传递过来的数据时，应该先做好数据校验，或者加
上try/catch代码块，以免由于疏忽引起的漏洞被有心人利用。</p>

<blockquote><p>建议：不必要的组件设置为<code>android:exported="false"</code>，对数据做好正确性的校验，通过Intent传递的数据处理加上try/catch。</p></blockquote>

<h3>Android自身漏洞引发的无法工作漏洞</h3>

<p>Android开发者都知道，如果一个APP包名相同，签名不同，是不能覆盖安装的，这样可以防止别人把APP植入
代码后再重新打包来进行安装。</p>

<p>但是在Android的签名检验里面却有一个漏洞，就是，如果一个apk里面的文件少了，比如apk里面的dex文件少
了一个文件什么的，这样子的apk，Android的签名校验会认为这个apk没有被修改过。</p>

<p>这样子就会被人利用来让一些APP无法工作，严重的，把整台手机的APP都变成无法工作，让手机彻底变“砖头”</p>

<p>攻击的流程也很简单</p>

<p>在Android设备中，其apk存储路径主要集中在 /data/app (用户应用)，/system/app(系统预装应用)和
/system/priv-app(系统核心应用)，但这三个文件夹均提供了读权限给任意的用户，不需要root：</p>

<p>这样子，就可以从这些目录里面把手机里的APP读取出来，然后，再删除里面的一些文件，再覆盖安装回去
这样子，因为签名一样，包名一样，就是提示为升级或覆盖安装，一但安装，那样这个应用就将无法工作</p>

<p>在删除apk中的文件时，不能删除classes.dex、AndroidManifest.xml以及/META-INFO文件夹。</p>

<p>这个漏洞的危害是非常大的，特别是有root的手机，因为可以静默安装，所以防不胜防，没有root的还好，
因为还会提示应用的安装。</p>

<p>从上面的攻击漏洞可以看到，这个需要用户安装APP，那样子，用户就可以选择不安装就可以了。
虽然要通过覆盖安装再会生效，这样会比较麻烦，但是事情没有绝对了，有一种方法可以实现无root权限
来进行“伪静默安装”的</p>

<p>在Android4.3之前，甚至一部分4.3的手机，安装的apk的时候都会有一个漏洞，那就是会被安装的应用会被
替换掉</p>

<p>通常，安装一个应用会有以下几个流程</p>

<ul>
<li>弹出权限的确认页面</li>
<li>用户点击确认之后，就开始进入安装流程，然后就安装成功</li>
</ul>


<p>可以发现，在这两个步骤之间，是有一个时间间隔的，这样，就可以利用这个时间间隔，把原来要安装的
apk替换成别的apk，这样子就会让安装进去的apk拥有意想不到的权限，</p>

<p>会发生这个是因为Android4.3之前，并没有对apk文件进行再次的校验引起的。</p>

<p>攻击代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">final</span> <span class="n">ActivityManager</span> <span class="n">am</span> <span class="o">=</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ACTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isReplace</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">&quot;SdCardPath&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;deprecation&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="n">List</span><span class="o">&lt;</span><span class="n">RunningTaskInfo</span><span class="o">&gt;</span> <span class="n">taskInfos</span> <span class="o">=</span> <span class="n">am</span><span class="o">.</span><span class="na">getRunningTasks</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="n">RunningTaskInfo</span> <span class="n">taskInfo</span> <span class="o">=</span> <span class="n">taskInfos</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>              <span class="n">ComponentName</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">taskInfo</span><span class="o">.</span><span class="na">topActivity</span><span class="o">;</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;vcode&quot;</span><span class="o">,</span> <span class="s">&quot;----&quot;</span> <span class="o">+</span> <span class="n">activity</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">activity</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;PackageInstallerActivity&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isReplace</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;/sdcard/aaa.apk&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">file</span><span class="o">.</span><span class="na">renameTo</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;/sdcard/aaa_.apk&quot;</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">File</span> <span class="n">attackFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;/sdcard/o.apk&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">attackFile</span><span class="o">.</span><span class="na">renameTo</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;/sdcard/aaa.apk&quot;</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">isReplace</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;vcode&quot;</span><span class="o">,</span> <span class="s">&quot;---------------------&quot;</span> <span class="o">+</span> <span class="n">isReplace</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;vcode&quot;</span><span class="o">,</span> <span class="s">&quot;--&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个漏洞是非常强大的，可以实现免root的伪静默安装</p>

<p>除了上面说到的这些漏洞，其实还有很多的漏洞可以实行攻击的，系统级的漏洞我们可能不能做什么
但是如果是由于自己的疏忽引发的漏洞还是要做好的</p>

<ul>
<li>allowBackup</li>
<li>四大组件</li>
<li>动态加载</li>
<li>数据库，SharedPreferences</li>
</ul>


<p>这些都是很容易出问题的地方</p>

<p>最后说一下Android的病毒木马</p>

<p>其实Android的病毒木马都是带有强烈的欺骗性的，都是通过模仿别的应用来达到欺骗的效果，
比如说伪造QQ的密码修改界面，让用户修改，然后就可以盗号了。很多都是这样一个形式</p>

<p>主要有下面的几大模块</p>

<ul>
<li>一个和官方一样的界面</li>
<li>读取短信，发送短信，获取通信录的权限（发送短信给通讯录里面的人，传播）</li>
<li>注册设备管理器*(防止被卸载，隐藏图标等)</li>
<li>指令模块（短信指令，网络指令）</li>
</ul>


<p>还有一些就是更暴力的，明抢的方式，就是通过锁屏类软件，让用户手机无法使用，如果想要使用，就汇钱
然后才能打开锁屏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程05-信号灯Semaphore]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/23/multi-thread-05-semaphore/"/>
    <updated>2015-07-23T11:18:47+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/23/multi-thread-05-semaphore</id>
    <content type="html"><![CDATA[<p>Semaphore可以维护当前访问自身的线程个数，并提供了同步机制，使用Semaphore可以控制同时访问资源的
线程个数，例如，实现一个文件允许的并发访问数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">ExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Semaphore</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Semaphore</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">semaphore</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; come in, current has &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">-</span> <span class="n">semaphore</span><span class="o">.</span><span class="na">availablePermits</span><span class="o">()));</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; ready to go&quot;</span><span class="o">);</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>              
</span><span class='line'>              <span class="c1">//下面代码有时候执行不准确，因为其没有和上面的代码合成原子单元</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; gone, current has &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">-</span> <span class="n">semaphore</span><span class="o">.</span><span class="na">availablePermits</span><span class="o">()));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>      <span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Semaphore可能通过构造函数传递一个true来实现FIFO的获取信号量的顺序</p>

<p>单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放
“锁”，这可应用于死锁的恢复的一些场合</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程04-Condition]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/23/multi-thread-04-condition/"/>
    <updated>2015-07-23T10:24:26+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/23/multi-thread-04-condition</id>
    <content type="html"><![CDATA[<p>在第一篇的多线程里面，有一个问题</p>

<blockquote><p>子线程循环10次，主线程循环100次，然后子线程再循环10次，主线程再循环100次，这样子交替循环100次</p></blockquote>

<p>当时，用的是synchronized, wait, notify来进行完成，这一次，使用Condition来完成这个</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConditionDemo</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Business</span> <span class="n">business</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConditionDemo</span><span class="o">().</span><span class="na">new</span> <span class="n">Business</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">business</span><span class="o">.</span><span class="na">sub</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">business</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Business</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">isSub</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sub</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>          <span class="k">try</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">while</span><span class="o">(!</span><span class="n">isSub</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sub &quot;</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">&quot; looper of &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">isSub</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>              <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">finally</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>          <span class="k">try</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">while</span> <span class="o">(</span><span class="n">isSub</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main &quot;</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">&quot; looper of &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">isSub</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">finally</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与之前的那个版本相比，Condition实现的优势就是，Condition可以有多个，这样就可以进行复杂的通信控制
可以实现更复杂的同步操作</p>

<p>下面是使用Condition实现的一个堵塞队列</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConditionBlockQueue</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Condition</span> <span class="n">notFull</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Condition</span> <span class="n">notEmpty</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">putStr</span><span class="o">,</span> <span class="n">takeStr</span><span class="o">,</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">queue</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">notFull</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">queue</span><span class="o">[</span><span class="n">putStr</span><span class="o">]</span> <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(++</span><span class="n">putStr</span> <span class="o">==</span> <span class="n">queue</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">putStr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>          <span class="n">notEmpty</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">finally</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">take</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">notEmpty</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">queue</span><span class="o">[</span><span class="n">takeStr</span><span class="o">];</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(++</span><span class="n">takeStr</span> <span class="o">==</span> <span class="n">queue</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">takeStr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">count</span><span class="o">--;</span>
</span><span class='line'>          <span class="n">notFull</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">finally</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这只是一个简单的堵塞队列的实现，在Java里面，已经有这样一个类了，ArrayBlockingQueue，
直接使用就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程03-ReadWriteLock]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/22/multi-thread-03-read-write-lock/"/>
    <updated>2015-07-22T17:34:21+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/22/multi-thread-03-read-write-lock</id>
    <content type="html"><![CDATA[<p>读写锁可以实现读写互斥，写写互斥，读读不互斥，这样可以极大的提高性能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CacheSimple</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">ReadWriteLock</span> <span class="n">rwl</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantReadWriteLock</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">rwl</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>          <span class="k">try</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>              <span class="n">value</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">rwl</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">rwl</span><span class="o">.</span><span class="na">writeLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                      <span class="o">{</span>
</span><span class='line'>                          <span class="c1">//get data from data source</span>
</span><span class='line'>                          <span class="c1">//value = xxx.getRealData(key);</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                      <span class="n">rwl</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">finally</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="n">rwl</span><span class="o">.</span><span class="na">writeLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">finally</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">rwl</span><span class="o">.</span><span class="na">readLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>加锁和解锁的位置很值得研究</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程02-ThreadLocal]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/22/multi-thread-02-threadlocal/"/>
    <updated>2015-07-22T10:57:52+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/22/multi-thread-02-threadlocal</id>
    <content type="html"><![CDATA[<p>Java线程相关的变量，每个线程都有自己的对应的变量，这样可以用ThreadLocal</p>

<p>还可以通过Map来实现，key为Thread.currentThread，然后value就是线程相关的数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadScopeData</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">MyThreadScopeData</span><span class="o">.</span><span class="na">getThreadInstance</span><span class="o">().</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; set data &quot;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">new</span> <span class="nf">BusinessA</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">BusinessB</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                  
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BusinessA</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">get</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A from &quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; get data &quot;</span> <span class="o">+</span> <span class="n">MyThreadScopeData</span><span class="o">.</span><span class="na">getThreadInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BusinessB</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">get</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B from &quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; get data &quot;</span> <span class="o">+</span> <span class="n">MyThreadScopeData</span><span class="o">.</span><span class="na">getThreadInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyThreadScopeData</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="nf">MyThreadScopeData</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">MyThreadScopeData</span><span class="o">&gt;</span> <span class="n">threadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">MyThreadScopeData</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">MyThreadScopeData</span> <span class="nf">getThreadInstance</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">MyThreadScopeData</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">threadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyThreadScopeData</span><span class="o">();</span>
</span><span class='line'>              <span class="n">threadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">instance</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ThreadLocal会将对应的线程的数据自动回收（当线程死亡时）所以不用担心内存泄漏，当然，还可以自动在
线程结束的时候调用remove来把ThreadLocal里面的数据删除</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA多线程01-线程间的通信]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/21/multi-thread-01-communication/"/>
    <updated>2015-07-21T16:22:05+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/21/multi-thread-01-communication</id>
    <content type="html"><![CDATA[<h1>题目</h1>

<blockquote><p>子线程循环10次，主线程循环100次，然后子线程再循环10次，主线程再循环100次，这样交替循环50次</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TraditionalThreadCommunication</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Business</span> <span class="n">business</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TraditionalThreadCommunication</span><span class="o">().</span><span class="na">new</span> <span class="n">Business</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">business</span><span class="o">.</span><span class="na">sub</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">business</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Business</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">isSub</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">sub</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(!</span><span class="n">isSub</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sub &quot;</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">&quot; looper of &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">isSub</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">isSub</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main &quot;</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">&quot; looper of &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">isSub</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>要注意的点</h2>

<ul>
<li>要把业务封装到一个类里面，这样做同步或其他的就很容易了</li>
<li>同步方法里面的while很有必要，不要用if代替，因为会有一定的机会出现伪唤醒的状态，所以while体现了水平</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 构造函数和析构函数的特别技巧]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/02/c-plus-plus-constructor-and-destructor-skills/"/>
    <updated>2015-07-02T10:50:23+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/02/c-plus-plus-constructor-and-destructor-skills</id>
    <content type="html"><![CDATA[<blockquote><h2>new出来的空间是在堆里面的，直接声明的空间是在栈里面的，数据量大的对象尽量用new</h2></blockquote>

<p><strong>不可复制的类</strong></p>

<p>我们有时候可能不想让一些资源不能被复制，如一个cpu等等，但是C++会默认帮你添加一个复制构造函数
这样子就会破坏我们想要的规则，所以要禁止对象被复制，可以声明一个私有的复制构造函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">CPU</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">CPU</span><span class="p">(</span><span class="k">const</span> <span class="n">CPU</span><span class="o">&amp;</span><span class="p">);</span> <span class="c1">//private copy constructor</span>
</span><span class='line'>        <span class="n">CPU</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">CPU</span><span class="o">&amp;</span><span class="p">);</span> <span class="c1">// private copy assignment operator</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>只需要把复制构造函数声明为私有就可以了，不需要提供实现
当然，上面在遇到赋值的时候，还是不可以的，所以我们还要提供<strong>私有赋值运算符的声明</strong></p>

<p><strong>单例模式</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">President</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// private default constructor</span>
</span><span class='line'>        <span class="n">President</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// private copy constroctor</span>
</span><span class='line'>        <span class="n">President</span><span class="p">(</span><span class="k">const</span> <span class="n">President</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// private assignment operator</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">President</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">President</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">string</span> <span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">President</span><span class="o">&amp;</span> <span class="n">GetInstance</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">static</span> <span class="n">President</span> <span class="n">OnlyInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">OnlyInstance</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">string</span> <span class="n">GetName</span><span class="p">();</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">SetName</span><span class="p">(</span><span class="n">string</span> <span class="n">InputName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Name</span> <span class="o">=</span> <span class="n">InputName</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>禁止在栈中实例化的类</strong></p>

<p>栈中的空间有限，所以如果一些包含数据大的类，应试禁止在栈上实例化，而只允许在堆上创建实例，
为此，关键在于将析构函数声明为私有的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MonsterDB</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="o">~</span><span class="n">MonsterDB</span><span class="p">()</span> <span class="p">{};</span> <span class="c1">// private destructor</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">void</span> <span class="n">DestroyInstance</span><span class="p">(</span><span class="n">MonsterDB</span><span class="o">*</span> <span class="n">pInstance</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">pInstance</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MonsterDB</span><span class="o">*</span> <span class="n">pMyDatabase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MonsterDB</span><span class="p">();</span>
</span><span class='line'>    <span class="n">MonsterDB</span><span class="o">::</span><span class="n">DestroyInstance</span><span class="p">(</span><span class="n">pMyDatabase</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要是把析构函数声明为私有的，然后再创建静态方法来释放new出来的空间，不然就会造成内存泄漏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写一个好的C++类以及对象的复制问题]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/02/c-plus-plus-class-and-object-copy/"/>
    <updated>2015-07-02T09:56:22+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/02/c-plus-plus-class-and-object-copy</id>
    <content type="html"><![CDATA[<p>当一个类包含一个指针成员，它指向动态分配的内存（这些内存是在构造函数中使用new分配的，并在析构
函数中使用delete进行释放）。复制这个类的对象时，将复制其指针成员，但不复制指针的缓冲区，这称为
浅复制，容易发生不可预知的问题</p>

<p>所以我们需要使用复制构造函数确保深复制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">*</span> <span class="n">Buffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">MyString</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">InitialInput</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">InitialInput</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">InitialInput</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="n">strcpy</span><span class="p">(</span><span class="n">Buffer</span><span class="p">,</span> <span class="n">InitialInput</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//copy constroctor</span>
</span><span class='line'>        <span class="n">MyString</span><span class="p">(</span><span class="k">const</span> <span class="n">MyString</span><span class="o">&amp;</span> <span class="n">CopySource</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">strcpy</span><span class="p">(</span><span class="n">Buffer</span><span class="p">,</span> <span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//destructor</span>
</span><span class='line'>        <span class="o">~</span><span class="n">MyString</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">Buffer</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">delete</span><span class="p">[]</span> <span class="n">Buffer</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">GetLength</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">strlen</span><span class="p">(</span><span class="n">Buffer</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">GetString</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Buffer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">UseMyString</span><span class="p">(</span><span class="n">MyString</span> <span class="n">Input</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;String buffer in MyString is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">Input</span><span class="p">.</span><span class="n">GetLength</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; characters long&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Buffer contains: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">Input</span><span class="p">.</span><span class="n">GetString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MyString</span> <span class="n">SayHello</span><span class="p">(</span><span class="s">&quot;hello from string class&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UseMyString</span><span class="p">(</span><span class="n">SayHello</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>由于C++的特征和需求，有些情况下对象会自动被复制，常见就是在函数参数的传递时，这样子就会频繁
的调用复制构造函数，如果复制构造函数的开销大的话，那样就会造成性能问题，所以对于C++ 11来说
可以编写移动构造函数来解决这个问题，具体查阅C++ 11的相关信息。</p></blockquote>

<p>对于上面这个类，当使用赋值运算进行复制时，还是会进行浅复制的，所以还要重载赋值运算符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>        <span class="c1">// copy assignment operator</span>
</span><span class='line'>        <span class="n">MyString</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">MyString</span><span class="o">&amp;</span> <span class="n">CopySource</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">((</span><span class="k">this</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">CopySource</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">Buffer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">delete</span><span class="p">[]</span> <span class="n">Buffer</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">strcpy</span><span class="p">(</span><span class="n">Buffer</span><span class="p">,</span> <span class="n">CopySource</span><span class="p">.</span><span class="n">Buffer</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过在复制构造函数声明中使用const，可确保复制构造函数不会修改指向的源对象，另外，<strong>复制构造函数的
参数必须按引用传递</strong>，否则调用它时将复制实参的值，导致于源数据进行浅复制，这样就死循环了。</p>

<p>编写类时应注意的事项</p>

<ul>
<li>类包含原始指针成员（<code>char*</code>等）时，务必编写复制构造函数和复制赋值运算符</li>
<li>编写复制构造函数时，务必将接受源对象的参数声明为const引用</li>
<li>务必将类成员声明为std::string和智能指针类（而不是原始指针），因为它们实现了复制构造函数，可减少工作量</li>
<li>除非万不得已，不要将类成员声明为原始指针</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 指针和引用]]></title>
    <link href="http://cyclecircle.github.io/blog/2015/07/01/c-plus-plus-pointer-and-quoter/"/>
    <updated>2015-07-01T14:28:58+08:00</updated>
    <id>http://cyclecircle.github.io/blog/2015/07/01/c-plus-plus-pointer-and-quoter</id>
    <content type="html"><![CDATA[<p>指针是存储内存地址的变量，所以指针是一个变量，指针也占用内存空间，
因此指针是一种指向内存单元的特殊变量。</p>

<p>作为一种变量，指针也需要声明，<em>可以将指针声明为指向一个内存块，这种指针被称为void指针</em>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">PointedType</span> <span class="o">*</span> <span class="n">PointerVariableName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>指针一定要初始化，不然就是指向一个随机的内存地址，引发不可预知的问题</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">PointedType</span> <span class="o">*</span> <span class="n">PointerVariableName</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用new和delete来进行内存分配和释放</p>

<p><strong>使用new分配出来的内存，一定要用delete来释放，不然就会造成内存泄漏</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Type</span><span class="o">*</span> <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'><span class="n">Type</span><span class="o">*</span> <span class="n">pointers</span><span class="o">=</span> <span class="k">new</span> <span class="n">Type</span><span class="p">[</span><span class="n">NumElements</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">pNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">pNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span> <span class="c1">//分配了10个int的空间</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用delete释放new分配出来的内存空间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Type</span><span class="o">*</span> <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">pNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="n">pNumber</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">pNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="k">delete</span><span class="p">[]</span> <span class="n">pNumbers</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>delete只能释放new分配的内存，不能作用于其他</strong></p>

<p>const作用于指针</p>

<p><strong>指针指向的数据为常量，不能修改，但可以修改指针包含的地址</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">HoursInDay</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">pInteger</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">HoursInDay</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">MonthsInYear</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'><span class="n">pInteger</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">MonthsInYear</span><span class="p">;</span> <span class="c1">//OK</span>
</span><span class='line'><span class="o">*</span><span class="n">pInteger</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span> <span class="c1">//error, cannot change data</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">pAnotherPointerToInt</span> <span class="o">=</span> <span class="n">pInteger</span><span class="p">;</span> <span class="c1">//error cannot assign const to non-const</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>指针包含的地址是常量，不能修改，但可以修改针指指向的数据</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">DaysInMonth</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">pDaysInMonth</span> <span class="o">=</span> <span class="o">&amp;</span> <span class="n">DaysInMonth</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">pDaysInMonth</span> <span class="o">=</span> <span class="mi">31</span><span class="p">;</span> <span class="c1">//OK</span>
</span><span class='line'><span class="kt">int</span> <span class="n">DaysInLunarMonth</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'><span class="n">pDaysInMonth</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">DaysInLunarMonth</span><span class="p">;</span> <span class="c1">// error cannot change address</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>指针包含的地址以及指向的值都不能修改</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">HoursInDay</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">pHoursInDay</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">HoursInDay</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">pHoursInDay</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span> <span class="c1">//error cannot change data</span>
</span><span class='line'><span class="kt">int</span> <span class="n">DaysInMonth</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="n">pHoursInDay</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">DaysInMonth</span><span class="p">;</span> <span class="c1">//error cannot change address</span>
</span></code></pre></td></tr></table></div></figure>


<p>引用是变量的别名。声明引用时，需要将其初始化为一个变量，因此引用只是另一种访问变量存储数据的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">VarType</span> <span class="n">Original</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="n">VarType</span><span class="o">&amp;</span> <span class="n">ReferenceVariable</span> <span class="o">=</span> <span class="n">Original</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Original</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Original = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">Original</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Original is at address: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">Original</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">&amp;</span> <span class="n">Ref</span> <span class="o">=</span> <span class="n">Original</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Ref is at address: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">Ref</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">&amp;</span> <span class="n">Ref2</span> <span class="o">=</span> <span class="n">Ref</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Ref2 is at address: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">Ref2</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Ref2 gets value, Ref2 = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">dec</span> <span class="o">&lt;&lt;</span> <span class="n">Ref2</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>引用主要用于函数参数的传递，这样不会进行参数的拷贝</strong></p>

<p>const作用于引用，可以禁止通过引用修改它指向的变量的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">Original</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">ConstRef</span> <span class="o">=</span> <span class="n">Original</span><span class="p">;</span>
</span><span class='line'><span class="n">ConstRef</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span> <span class="c1">// error cannot change value</span>
</span><span class='line'><span class="kt">int</span><span class="o">&amp;</span> <span class="n">Ref2</span> <span class="o">=</span> <span class="n">ConstRef</span><span class="p">;</span> <span class="c1">// error Ref2 is not const</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">ConstRef2</span> <span class="o">=</span> <span class="n">ConstRef</span><span class="p">;</span> <span class="c1">//OK</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
